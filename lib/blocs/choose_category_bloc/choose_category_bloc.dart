import 'package:equatable/equatable.dart';
import 'package:flutter/material.dart';
import 'package:flutter_bloc/flutter_bloc.dart';
import 'package:places/data/model/category.dart';

part 'choose_category_event.dart';
part 'choose_category_state.dart';

class ChooseCategoryBloc extends Bloc<ChooseCategoryEvent, ChooseCategoryState> {
  ChooseCategoryBloc() : super(const ChooseCategoryState(isEmpty: true)) {
    on<ChosenCategoryEvent>(
      (event, emit) => emit(
        ChooseCategoryState(
          isEmpty: event.isEmpty,
          chosenCategory: event.chosenCategory,
        ),
      ),
    );
    on<UnchosenCategoryEvent>(
      (event, emit) => emit(
        ChooseCategoryState(
          isEmpty: event.isEmpty,
        ),
      ),
    );
  }


    // –†–∞–Ω—å—à–µ –Ω–µ —Ä–∞–±–æ—Ç–∞–ª–æ, –ø–æ—Ç–æ–º—É —á—Ç–æ —è —Å –∏–≤–µ–Ω—Ç–∞ –ø—Ä–æ–∫–∏–¥—ã–≤–∞–ª –≤ —ç—Ç–æ—Ç –º–µ—Ç–æ–¥ –∑–Ω–∞—á–µ–Ω–∏—è –∏ –≤—ã–∑—ã–≤–∞–ª –µ–≥–æ –≤ –º–µ—Ç–æ–¥–µ on
    // –ù—É–∂–Ω–æ –±—ã–ª–æ –ø—Ä–æ—Å—Ç–æ –µ–≥–æ –≤—ã–∑—ã–≤–∞—Ç—å —á–µ—Ä–µ–∑ context
    List<Category> chooseCategory({
    required int index,
    required List<Category> categories,
    required List<Category> activeCategories,
  }) {
    final category = categories[index];
    final activeCategory = activeCategories;
    var isEnabled = !categories[index].isEnabled;
    isEnabled = !isEnabled;
    for (final i in categories) {
      if (!isEnabled) {
        activeCategory.add(category);
        category.isEnabled = true;
        i.isEnabled = false;
        activeCategory
          ..clear()
          ..add(category);
        debugPrint('üü°--------- –í—ã–±—Ä–∞–Ω–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏—è: ${category.title}');
        category.isEnabled = true;
      } else {
        category.isEnabled = false;
        activeCategory.clear();
      }
    }

    return activeCategory;
  }
}
