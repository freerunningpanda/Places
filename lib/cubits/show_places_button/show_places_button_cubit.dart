import 'package:equatable/equatable.dart';
import 'package:flutter/foundation.dart';
import 'package:flutter/material.dart';
import 'package:flutter_bloc/flutter_bloc.dart';
import 'package:geolocator/geolocator.dart';
import 'package:places/blocs/filters_screen_bloc/filters_screen_bloc.dart';
import 'package:places/data/api/api_places.dart';
import 'package:places/data/database/database.dart';
import 'package:places/data/dto/place_request.dart';
import 'package:places/data/interactor/place_interactor.dart';
import 'package:places/data/repository/mapper.dart';
import 'package:places/data/repository/place_repository.dart';
import 'package:places/data/store/app_preferences.dart';
import 'package:places/mocks.dart';

part 'show_places_button_state.dart';

class ShowPlacesButtonCubit extends Cubit<ShowPlacesButtonState> {
  final filters = FiltersScreenBloc.filters;
  final interactor = PlaceInteractor(
    repository: PlaceRepository(
      apiPlaces: ApiPlaces(),
    ),
  );
  ShowPlacesButtonCubit()
      : super(
          ShowPlacesButtonState(
            isEmpty: AppPreferences.getPlacesListByDistance()?.isEmpty ?? true,
            foundPlacesLength: AppPreferences.getPlacesListByDistance()?.length ?? 0,
          ),
        );

  Future<void> getPlaces() async {}

  // –ú–µ—Ç–æ–¥ –¥–ª—è –∫–Ω–æ–ø–∫–∏ –æ—á–∏—Å—Ç–∫–∏ –≤—Å–µ—Ö —Ñ–∏–ª—å—Ç—Ä–æ–≤
  Future<void> clearAllFilters() async {
    filters.map((e) => e.isEnabled = false).toList();
    PlaceInteractor.initialFilteredPlaces.clear();
    // –ü–æ–ª—É—á–∞—é —Å–Ω–æ–≤–∞ –≤—Å–µ –º–µ—Å—Ç–∞
    // –ü–æ–∫–∞ –Ω–µ –Ω–∞—à—ë–ª —Å–ø–æ—Å–æ–±–∞ –∫–∞–∫ —É–¥–∞–ª–∏—Ç—å –≤—Å–µ –æ—Ç—Ñ–∏–ª—å—Ç—Ä–æ–≤–∞–Ω–Ω—ã–µ –º–µ—Å—Ç–∞
    // –û—Å—Ç–∞–≤–∏–≤ –ø—Ä–∏ —ç—Ç–æ–º –æ—Å—Ç–∞–ª—å–Ω—ã–µ
    // –ü–æ—ç—Ç–æ–º—É —Ç–∞–∫–æ–µ —Ä–µ—à–µ–Ω–∏–µ
    final places = await interactor.getPlaces();
    // –ó–¥–µ—Å—å –ø—Ä–æ—Ö–æ–∂—É—Å—å —Ç–æ–ª—å–∫–æ –ø–æ –≤—Å–µ–º –º–µ—Å—Ç–∞–º
    // –ü–æ—Ç–æ–º—É —á—Ç–æ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ —Ñ–∏–ª—å—Ç—Ä–æ–≤ –Ω—É–∂–Ω–æ —Å–Ω–æ–≤–∞ –ø–æ–∫–∞–∑–∞—Ç—å –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –≤—Å–µ—Ö –º–µ—Å—Ç
    // –í —Ä–∞–¥–∏—É—Å–µ –ø–æ–∏—Å–∫–∞
    for (final el in places) {
      final position = await Geolocator.getCurrentPosition();
      final distance = Geolocator.distanceBetween(
        position.latitude,
        position.longitude,
        el.lat,
        el.lng,
      );
      if (distance >= Mocks.rangeValues.start && distance <= Mocks.rangeValues.end) {
        PlaceInteractor.filtersWithDistance.add(el);
        final isEmpty = PlaceInteractor.filtersWithDistance.isEmpty;
        final length = PlaceInteractor.filtersWithDistance.length;
        debugPrint('üü°---------–î–æ–±–∞–≤–ª–µ–Ω–Ω—ã–µ –º–µ—Å—Ç–∞ (–¥–∏—Å—Ç–∞–Ω—Ü–∏—è): ${PlaceInteractor.filtersWithDistance}');
        debugPrint(
          'üü°---------–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–æ–±–∞–≤–ª–µ–Ω–Ω—ã—Ö –º–µ—Å—Ç (–¥–∏—Å—Ç–∞–Ω—Ü–∏—è): ${PlaceInteractor.filtersWithDistance.length}',
        );
        debugPrint('–î–ª–∏–Ω–∞ –ø–æ—Å–ª–µ –Ω–∞–∂–∞—Ç–∏—è "–û—á–∏—Å—Ç–∏—Ç—å": ${PlaceInteractor.filtersWithDistance.length}');
        emit(ShowPlacesButtonState(isEmpty: isEmpty, foundPlacesLength: length));
      } else {
        // –≠–º–∏—Ç–∏—Ç—å –ø—É—Å—Ç—ã–µ –º–µ—Å—Ç–∞, –µ—Å–ª–∏ –æ–Ω–∏ –Ω–µ –≤—Ö–æ–¥—è—Ç –≤ –¥–∏–∞–ø–∞–∑–æ–Ω –ø–æ–∏—Å–∫–∞
        // –ß—Ç–æ–±—ã —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∫–Ω–æ–ø–∫–∏ –º–µ–Ω—è–ª–æ—Å—å, –∫–æ–≥–¥–∞ –º–µ—Å—Ç–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã
        PlaceInteractor.filtersWithDistance.clear();
        debugPrint('üü°---------–î–æ–±–∞–≤–ª–µ–Ω–Ω—ã–µ –º–µ—Å—Ç–∞ (–¥–∏—Å—Ç–∞–Ω—Ü–∏—è): ${PlaceInteractor.filtersWithDistance}');
        debugPrint(
          'üü°---------–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–æ–±–∞–≤–ª–µ–Ω–Ω—ã—Ö –º–µ—Å—Ç (–¥–∏—Å—Ç–∞–Ω—Ü–∏—è): ${PlaceInteractor.filtersWithDistance.length}',
        );
        emit(const ShowPlacesButtonState(isEmpty: true, foundPlacesLength: 0));
      }
    }
  }

// –ï—Å–ª–∏ –Ω–∏ –æ–¥–Ω–æ –º–µ—Å—Ç–æ –Ω–µ –ø–æ–ø–∞–ª–æ –≤ —Å–ø–∏—Å–æ–∫ —Å —Ñ–∏–ª—å—Ç—Ä–∞–º–∏ —Ç–æ –æ–±–Ω—É–ª–∏—Ç—å —Å—á—ë—Ç—á–∏–∫
// –í—ã–∑—ã–≤–∞–µ—Ç—Å—è –ø—Ä–∏ –≤—ã–±–æ—Ä–µ —Ñ–∏–ª—å—Ç—Ä–∞
  void resetToZero() {
    if (PlaceInteractor.initialFilteredPlaces.isEmpty) {
      PlaceInteractor.filtersWithDistance.clear();
      emit(
        const ShowPlacesButtonState(isEmpty: true, foundPlacesLength: 0),
      );
    }
  }

  // ignore: long-method
  Future<void> showCount({required List<DbPlace> places}) async {
    // var jsonString = AppPreferences.getPlacesList();

    final placesByType = AppPreferences.getPlacesListByType();
    final placesByDistance = AppPreferences.getPlacesListByDistance();

    if (placesByType != null) {
      if (placesByType.isEmpty) {
        PlaceInteractor.filtersWithDistance.clear();
        // –ï—Å–ª–∏ –æ—Ç—Å–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –ø–æ —Ç–∏–ø—É —Å–ø–∏—Å–æ–∫ –º–µ—Å—Ç –ø—É—Å—Ç. –¢–æ –ø—Ä–æ–π—Ç–∏—Å—å –≤–æ–æ–±—â–µ –ø–æ –≤—Å–µ–º –º–µ—Å—Ç–∞–º.
        for (final el in places) {
          final position = await Geolocator.getCurrentPosition();
          final distance = Geolocator.distanceBetween(
            position.latitude,
            position.longitude,
            el.lat,
            el.lng,
          );
          if (distance >= Mocks.rangeValues.start && distance <= Mocks.rangeValues.end) {
            PlaceInteractor.filtersWithDistance.add(el);
            final isEmpty = PlaceInteractor.filtersWithDistance.isEmpty;
            final length = PlaceInteractor.filtersWithDistance.length;
            debugPrint('üü°---------–î–æ–±–∞–≤–ª–µ–Ω–Ω—ã–µ –º–µ—Å—Ç–∞ (–¥–∏—Å—Ç–∞–Ω—Ü–∏—è): ${PlaceInteractor.filtersWithDistance}');
            debugPrint(
              'üü°---------–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–æ–±–∞–≤–ª–µ–Ω–Ω—ã—Ö –º–µ—Å—Ç (–¥–∏—Å—Ç–∞–Ω—Ü–∏—è): ${PlaceInteractor.filtersWithDistance.length}',
            );
            emit(ShowPlacesButtonState(isEmpty: isEmpty, foundPlacesLength: length));
          } else {
            // –≠–º–∏—Ç–∏—Ç—å –ø—É—Å—Ç—ã–µ –º–µ—Å—Ç–∞, –µ—Å–ª–∏ –æ–Ω–∏ –Ω–µ –≤—Ö–æ–¥—è—Ç –≤ –¥–∏–∞–ø–∞–∑–æ–Ω –ø–æ–∏—Å–∫–∞
            // –ß—Ç–æ–±—ã —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∫–Ω–æ–ø–∫–∏ –º–µ–Ω—è–ª–æ—Å—å, –∫–æ–≥–¥–∞ –º–µ—Å—Ç–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã
            PlaceInteractor.filtersWithDistance.clear();
            debugPrint('üü°---------–î–æ–±–∞–≤–ª–µ–Ω–Ω—ã–µ –º–µ—Å—Ç–∞ (–¥–∏—Å—Ç–∞–Ω—Ü–∏—è): ${PlaceInteractor.filtersWithDistance}');
            debugPrint(
              'üü°---------–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–æ–±–∞–≤–ª–µ–Ω–Ω—ã—Ö –º–µ—Å—Ç (–¥–∏—Å—Ç–∞–Ω—Ü–∏—è): ${PlaceInteractor.filtersWithDistance.length}',
            );
            emit(const ShowPlacesButtonState(isEmpty: false, foundPlacesLength: 0));
          }
        }
      } else {
        PlaceInteractor.filtersWithDistance.clear();
        placesByDistance?.clear();
        // –ï—Å–ª–∏ –µ—Å—Ç—å –º–µ—Å—Ç–∞ –≤ –æ—Ç—Å–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–Ω–æ–º –ø–æ —Ç–∏–ø—É —Å–ø–∏—Å–∫–µ –º–µ—Å—Ç —Ç–æ –ø—Ä–æ–π—Ç–∏—Å—å –ø–æ –Ω–µ–º—É
        for (final el in placesByType) {
          final position = await Geolocator.getCurrentPosition();
          final distance = Geolocator.distanceBetween(
            position.latitude,
            position.longitude,
            el.lat,
            el.lng,
          );
          if (distance >= Mocks.rangeValues.start && distance <= Mocks.rangeValues.end) {
            PlaceInteractor.filtersWithDistance.add(el);
            final isEmpty = PlaceInteractor.filtersWithDistance.isEmpty;
            final length = PlaceInteractor.filtersWithDistance.length;
            debugPrint('üü°---------–î–æ–±–∞–≤–ª–µ–Ω–Ω—ã–µ –º–µ—Å—Ç–∞ (–¥–∏—Å—Ç–∞–Ω—Ü–∏—è): ${PlaceInteractor.filtersWithDistance}');
            debugPrint(
              'üü°---------–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–æ–±–∞–≤–ª–µ–Ω–Ω—ã—Ö –º–µ—Å—Ç (–¥–∏—Å—Ç–∞–Ω—Ü–∏—è): ${PlaceInteractor.filtersWithDistance.length}',
            );
            emit(ShowPlacesButtonState(isEmpty: isEmpty, foundPlacesLength: length));
          } else {
            // –≠–º–∏—Ç–∏—Ç—å –ø—É—Å—Ç—ã–µ –º–µ—Å—Ç–∞, –µ—Å–ª–∏ –æ–Ω–∏ –Ω–µ –≤—Ö–æ–¥—è—Ç –≤ –¥–∏–∞–ø–∞–∑–æ–Ω –ø–æ–∏—Å–∫–∞
            // –ß—Ç–æ–±—ã —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∫–Ω–æ–ø–∫–∏ –º–µ–Ω—è–ª–æ—Å—å, –∫–æ–≥–¥–∞ –º–µ—Å—Ç–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã
            PlaceInteractor.filtersWithDistance.clear();
            debugPrint('üü°---------–î–æ–±–∞–≤–ª–µ–Ω–Ω—ã–µ –º–µ—Å—Ç–∞ (–¥–∏—Å—Ç–∞–Ω—Ü–∏—è): ${PlaceInteractor.filtersWithDistance}');
            debugPrint(
              'üü°---------–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–æ–±–∞–≤–ª–µ–Ω–Ω—ã—Ö –º–µ—Å—Ç (–¥–∏—Å—Ç–∞–Ω—Ü–∏—è): ${PlaceInteractor.filtersWithDistance.length}',
            );
            emit(const ShowPlacesButtonState(isEmpty: true, foundPlacesLength: 0));
          }
        }
      }
    }

    if (PlaceInteractor.initialFilteredPlaces.isEmpty) {
      PlaceInteractor.filtersWithDistance.clear();
      // –ï—Å–ª–∏ –æ—Ç—Å–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –ø–æ —Ç–∏–ø—É —Å–ø–∏—Å–æ–∫ –º–µ—Å—Ç –ø—É—Å—Ç. –¢–æ –ø—Ä–æ–π—Ç–∏—Å—å –≤–æ–æ–±—â–µ –ø–æ –≤—Å–µ–º –º–µ—Å—Ç–∞–º.
      for (final el in places) {
        final position = await Geolocator.getCurrentPosition();
        final distance = Geolocator.distanceBetween(
          position.latitude,
          position.longitude,
          el.lat,
          el.lng,
        );
        if (distance >= Mocks.rangeValues.start && distance <= Mocks.rangeValues.end) {
          PlaceInteractor.filtersWithDistance.add(el);
          final isEmpty = PlaceInteractor.filtersWithDistance.isEmpty;
          final length = PlaceInteractor.filtersWithDistance.length;
          debugPrint('üü°---------–î–æ–±–∞–≤–ª–µ–Ω–Ω—ã–µ –º–µ—Å—Ç–∞ (–¥–∏—Å—Ç–∞–Ω—Ü–∏—è): ${PlaceInteractor.filtersWithDistance}');
          debugPrint(
            'üü°---------–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–æ–±–∞–≤–ª–µ–Ω–Ω—ã—Ö –º–µ—Å—Ç (–¥–∏—Å—Ç–∞–Ω—Ü–∏—è): ${PlaceInteractor.filtersWithDistance.length}',
          );
          emit(ShowPlacesButtonState(isEmpty: isEmpty, foundPlacesLength: length));
        } else {
          // –≠–º–∏—Ç–∏—Ç—å –ø—É—Å—Ç—ã–µ –º–µ—Å—Ç–∞, –µ—Å–ª–∏ –æ–Ω–∏ –Ω–µ –≤—Ö–æ–¥—è—Ç –≤ –¥–∏–∞–ø–∞–∑–æ–Ω –ø–æ–∏—Å–∫–∞
          // –ß—Ç–æ–±—ã —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∫–Ω–æ–ø–∫–∏ –º–µ–Ω—è–ª–æ—Å—å, –∫–æ–≥–¥–∞ –º–µ—Å—Ç–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã
          PlaceInteractor.filtersWithDistance.clear();
          debugPrint('üü°---------–î–æ–±–∞–≤–ª–µ–Ω–Ω—ã–µ –º–µ—Å—Ç–∞ (–¥–∏—Å—Ç–∞–Ω—Ü–∏—è): ${PlaceInteractor.filtersWithDistance}');
          debugPrint(
            'üü°---------–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–æ–±–∞–≤–ª–µ–Ω–Ω—ã—Ö –º–µ—Å—Ç (–¥–∏—Å—Ç–∞–Ω—Ü–∏—è): ${PlaceInteractor.filtersWithDistance.length}',
          );
          emit(const ShowPlacesButtonState(isEmpty: true, foundPlacesLength: 0));
        }
      }
    } else {
      PlaceInteractor.filtersWithDistance.clear();
      // –ï—Å–ª–∏ –µ—Å—Ç—å –º–µ—Å—Ç–∞ –≤ –æ—Ç—Å–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–Ω–æ–º –ø–æ —Ç–∏–ø—É —Å–ø–∏—Å–∫–µ –º–µ—Å—Ç —Ç–æ –ø—Ä–æ–π—Ç–∏—Å—å –ø–æ –Ω–µ–º—É
      for (final el in PlaceInteractor.initialFilteredPlaces) {
        final position = await Geolocator.getCurrentPosition();
        final distance = Geolocator.distanceBetween(
          position.latitude,
          position.longitude,
          el.lat,
          el.lng,
        );
        if (distance >= Mocks.rangeValues.start && distance <= Mocks.rangeValues.end) {
          PlaceInteractor.filtersWithDistance.add(el);
          final isEmpty = PlaceInteractor.filtersWithDistance.isEmpty;
          final length = PlaceInteractor.filtersWithDistance.length;
          debugPrint('üü°---------–î–æ–±–∞–≤–ª–µ–Ω–Ω—ã–µ –º–µ—Å—Ç–∞ (–¥–∏—Å—Ç–∞–Ω—Ü–∏—è): ${PlaceInteractor.filtersWithDistance}');
          debugPrint(
            'üü°---------–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–æ–±–∞–≤–ª–µ–Ω–Ω—ã—Ö –º–µ—Å—Ç (–¥–∏—Å—Ç–∞–Ω—Ü–∏—è): ${PlaceInteractor.filtersWithDistance.length}',
          );

          emit(ShowPlacesButtonState(isEmpty: isEmpty, foundPlacesLength: length));
        } else {
          // –≠–º–∏—Ç–∏—Ç—å –ø—É—Å—Ç—ã–µ –º–µ—Å—Ç–∞, –µ—Å–ª–∏ –æ–Ω–∏ –Ω–µ –≤—Ö–æ–¥—è—Ç –≤ –¥–∏–∞–ø–∞–∑–æ–Ω –ø–æ–∏—Å–∫–∞
          // –ß—Ç–æ–±—ã —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∫–Ω–æ–ø–∫–∏ –º–µ–Ω—è–ª–æ—Å—å, –∫–æ–≥–¥–∞ –º–µ—Å—Ç–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã
          PlaceInteractor.filtersWithDistance.clear();
          debugPrint('üü°---------–î–æ–±–∞–≤–ª–µ–Ω–Ω—ã–µ –º–µ—Å—Ç–∞ (–¥–∏—Å—Ç–∞–Ω—Ü–∏—è): ${PlaceInteractor.filtersWithDistance}');
          debugPrint(
            'üü°---------–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–æ–±–∞–≤–ª–µ–Ω–Ω—ã—Ö –º–µ—Å—Ç (–¥–∏—Å—Ç–∞–Ω—Ü–∏—è): ${PlaceInteractor.filtersWithDistance.length}',
          );
          emit(const ShowPlacesButtonState(isEmpty: true, foundPlacesLength: 0));
        }
      }
    }

    await savePlaces();
  }

  Future<void> savePlaces() async {
    final filtersWithDistance = Mapper.getFiltersWithDistance(PlaceInteractor.filtersWithDistance);
    // –ö–æ–¥–∏—Ä—É—é —Å–ø–∏—Å–æ–∫ –≤ —Å—Ç—Ä–æ–∫—É Json
    final jsonString = PlaceRequest.encode(filtersWithDistance);

    // –°–æ—Ö—Ä–∞–Ω—è—é –¥–∞–Ω–Ω—É—é —Å—Ç—Ä–æ–∫—É –≤ Shared Preferences
    await AppPreferences.setPlacesListByDistance(jsonString);

    debugPrint('encodedData: ${jsonString.length}');
  }
}
